package handler_test

import (
	"aletheiaware.com/authgo"
	"aletheiaware.com/authgo/authtest"
	"aletheiaware.com/conveyearthgo"
	"aletheiaware.com/conveyearthgo/conveytest"
	"aletheiaware.com/conveyearthgo/database"
	"aletheiaware.com/conveyearthgo/filesystem"
	"aletheiaware.com/conveyearthgo/handler"
	"fmt"
	"github.com/stretchr/testify/assert"
	"html/template"
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"os"
	"strconv"
	"strings"
	"testing"
)

func TestGift(t *testing.T) {
	dir, err := os.MkdirTemp("", "test")
	assert.Nil(t, err)
	fs := filesystem.NewOnDisk(dir)
	defer os.RemoveAll(dir)
	tmpl, err := template.New("gift.go.html").Parse(`{{.Error}}{{with .Account}}{{.Username}}{{end}}`)
	assert.Nil(t, err)
	t.Run("Returns 200 When Signed In", func(t *testing.T) {
		db := database.NewInMemory()
		ev := authtest.NewEmailVerifier()
		auth := authgo.NewAuthenticator(db, ev)
		acc := authtest.NewTestAccount(t, auth)
		token, _ := authtest.SignIn(t, auth)
		am := conveyearthgo.NewAccountManager(db)
		cm := conveyearthgo.NewContentManager(db, fs)
		c, m, _ := conveytest.NewConversation(t, cm, acc)
		nm := conveyearthgo.NewNotificationManager(db, conveytest.NewNotificationSender())
		mux := http.NewServeMux()
		handler.AttachGiftHandler(mux, auth, am, cm, nm, tmpl)
		request := httptest.NewRequest(http.MethodGet, fmt.Sprintf("/gift?conversation=%d&message=%d", c.ID, m.ID), nil)
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, authtest.TEST_USERNAME, string(body))
	})
	t.Run("Redirects When Not Signed In", func(t *testing.T) {
		db := database.NewInMemory()
		ev := authtest.NewEmailVerifier()
		auth := authgo.NewAuthenticator(db, ev)
		acc := authtest.NewTestAccount(t, auth)
		am := conveyearthgo.NewAccountManager(db)
		cm := conveyearthgo.NewContentManager(db, fs)
		c, m, _ := conveytest.NewConversation(t, cm, acc)
		nm := conveyearthgo.NewNotificationManager(db, conveytest.NewNotificationSender())
		mux := http.NewServeMux()
		handler.AttachGiftHandler(mux, auth, am, cm, nm, tmpl)
		request := httptest.NewRequest(http.MethodGet, fmt.Sprintf("/gift?conversation=%d&message=%d", c.ID, m.ID), nil)
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, fmt.Sprintf("/sign-in?next=%%2Fgift%%3Fconversation%%3D%d%%26message%%3D%d", c.ID, m.ID), u.String())
	})
	t.Run("Returns 404 When Conversation Does Not Exist", func(t *testing.T) {
		db := database.NewInMemory()
		ev := authtest.NewEmailVerifier()
		auth := authgo.NewAuthenticator(db, ev)
		acc := authtest.NewTestAccount(t, auth)
		token, _ := authtest.SignIn(t, auth)
		am := conveyearthgo.NewAccountManager(db)
		cm := conveyearthgo.NewContentManager(db, fs)
		c, m, _ := conveytest.NewConversation(t, cm, acc)
		nm := conveyearthgo.NewNotificationManager(db, conveytest.NewNotificationSender())
		mux := http.NewServeMux()
		handler.AttachGiftHandler(mux, auth, am, cm, nm, tmpl)
		// Get
		request := httptest.NewRequest(http.MethodGet, fmt.Sprintf("/gift?conversation=%d&message=%d", c.ID+1, m.ID), nil)
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusNotFound, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, http.StatusText(http.StatusNotFound)+"\n", string(body))
		// Post
		request = httptest.NewRequest(http.MethodPost, fmt.Sprintf("/gift?conversation=%d&message=%d", c.ID+1, m.ID), nil)
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response = httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result = response.Result()
		assert.Equal(t, http.StatusNotFound, result.StatusCode)
		body, err = io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, http.StatusText(http.StatusNotFound)+"\n", string(body))
	})
	t.Run("Returns 404 When Message Does Not Exist", func(t *testing.T) {
		db := database.NewInMemory()
		ev := authtest.NewEmailVerifier()
		auth := authgo.NewAuthenticator(db, ev)
		acc := authtest.NewTestAccount(t, auth)
		token, _ := authtest.SignIn(t, auth)
		am := conveyearthgo.NewAccountManager(db)
		cm := conveyearthgo.NewContentManager(db, fs)
		c, m, _ := conveytest.NewConversation(t, cm, acc)
		nm := conveyearthgo.NewNotificationManager(db, conveytest.NewNotificationSender())
		mux := http.NewServeMux()
		handler.AttachGiftHandler(mux, auth, am, cm, nm, tmpl)
		// Get
		request := httptest.NewRequest(http.MethodGet, fmt.Sprintf("/gift?conversation=%d&message=%d", c.ID, m.ID+1), nil)
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusNotFound, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, http.StatusText(http.StatusNotFound)+"\n", string(body))
		// Post
		request = httptest.NewRequest(http.MethodPost, fmt.Sprintf("/gift?conversation=%d&message=%d", c.ID, m.ID+1), nil)
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response = httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result = response.Result()
		assert.Equal(t, http.StatusNotFound, result.StatusCode)
		body, err = io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, http.StatusText(http.StatusNotFound)+"\n", string(body))
	})
	t.Run("Insufficient Balance", func(t *testing.T) {
		db := database.NewInMemory()
		ev := authtest.NewEmailVerifier()
		auth := authgo.NewAuthenticator(db, ev)
		authtest.NewTestAccount(t, auth)
		token, _ := authtest.SignIn(t, auth)
		am := conveyearthgo.NewAccountManager(db)
		cm := conveyearthgo.NewContentManager(db, fs)
		acc2, err := auth.NewAccount("2"+authtest.TEST_EMAIL, authtest.TEST_USERNAME+"2", []byte(authtest.TEST_PASSWORD))
		assert.Nil(t, err)
		c, m, _ := conveytest.NewConversation(t, cm, acc2)
		nm := conveyearthgo.NewNotificationManager(db, conveytest.NewNotificationSender())
		mux := http.NewServeMux()
		handler.AttachGiftHandler(mux, auth, am, cm, nm, tmpl)
		values := url.Values{}
		values.Add("conversation", strconv.FormatInt(c.ID, 10))
		values.Add("message", strconv.FormatInt(m.ID, 10))
		values.Add("gift", strconv.FormatInt(conveytest.TEST_PURCHASE_SIZE/10, 10))
		reader := strings.NewReader(values.Encode())
		request := httptest.NewRequest(http.MethodPost, "/gift", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, conveyearthgo.ErrInsufficientBalance.Error()+authtest.TEST_USERNAME, string(body))
	})
	t.Run("Self Gift", func(t *testing.T) {
		db := database.NewInMemory()
		ev := authtest.NewEmailVerifier()
		auth := authgo.NewAuthenticator(db, ev)
		acc := authtest.NewTestAccount(t, auth)
		token, _ := authtest.SignIn(t, auth)
		am := conveyearthgo.NewAccountManager(db)
		conveytest.NewPurchase(t, am, acc)
		cm := conveyearthgo.NewContentManager(db, fs)
		c, m, _ := conveytest.NewConversation(t, cm, acc)
		nm := conveyearthgo.NewNotificationManager(db, conveytest.NewNotificationSender())
		mux := http.NewServeMux()
		handler.AttachGiftHandler(mux, auth, am, cm, nm, tmpl)
		values := url.Values{}
		values.Add("conversation", strconv.FormatInt(c.ID, 10))
		values.Add("message", strconv.FormatInt(m.ID, 10))
		values.Add("gift", strconv.FormatInt(conveytest.TEST_PURCHASE_SIZE/10, 10))
		reader := strings.NewReader(values.Encode())
		request := httptest.NewRequest(http.MethodPost, "/gift", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusOK, result.StatusCode)
		body, err := io.ReadAll(result.Body)
		assert.Nil(t, err)
		assert.Equal(t, conveyearthgo.ErrSelfGiftingNotPermitted.Error()+authtest.TEST_USERNAME, string(body))
	})
	t.Run("Success", func(t *testing.T) {
		db := database.NewInMemory()
		ev := authtest.NewEmailVerifier()
		auth := authgo.NewAuthenticator(db, ev)
		acc := authtest.NewTestAccount(t, auth)
		token, _ := authtest.SignIn(t, auth)
		am := conveyearthgo.NewAccountManager(db)
		conveytest.NewPurchase(t, am, acc)
		cm := conveyearthgo.NewContentManager(db, fs)
		acc2, err := auth.NewAccount("2"+authtest.TEST_EMAIL, authtest.TEST_USERNAME+"2", []byte(authtest.TEST_PASSWORD))
		assert.Nil(t, err)
		c, m, _ := conveytest.NewConversation(t, cm, acc2)
		nm := conveyearthgo.NewNotificationManager(db, conveytest.NewNotificationSender())
		mux := http.NewServeMux()
		handler.AttachGiftHandler(mux, auth, am, cm, nm, tmpl)
		values := url.Values{}
		values.Add("conversation", strconv.FormatInt(c.ID, 10))
		values.Add("message", strconv.FormatInt(m.ID, 10))
		values.Add("gift", strconv.FormatInt(conveytest.TEST_PURCHASE_SIZE/10, 10))
		reader := strings.NewReader(values.Encode())
		request := httptest.NewRequest(http.MethodPost, "/gift", reader)
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		request.AddCookie(auth.NewSignInSessionCookie(token))
		response := httptest.NewRecorder()
		mux.ServeHTTP(response, request)
		result := response.Result()
		assert.Equal(t, http.StatusFound, result.StatusCode)
		u, err := result.Location()
		assert.Nil(t, err)
		assert.Equal(t, fmt.Sprintf("/conversation?id=%d#message%d", c.ID, m.ID), u.String())
	})
	// TODO Success Notification
}
